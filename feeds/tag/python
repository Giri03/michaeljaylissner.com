<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Jay Lissner</title><link href="http://michaeljaylissner.com/" rel="alternate"></link><link href="http://michaeljaylissner.com/feeds/tag/python" rel="self"></link><id>http://michaeljaylissner.com/</id><updated>2012-05-20T15:48:06+02:00</updated><entry><title>New tool for testing lxml XPath queries</title><link href="http://michaeljaylissner.com/posts/2012/05/20/new-tool-for-testing-lxml-xpath-queries/" rel="alternate"></link><updated>2012-05-20T15:48:06+02:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2012-05-20:posts/2012/05/20/new-tool-for-testing-lxml-xpath-queries/</id><summary type="html">&lt;p&gt;I got a bit frustrated today, and decided that I should build a tool to fix my frustration. The problem was that we're using a lot of XPath queries to scrape various court websites, but there was no tool that could be used to test xpath expressions efficiently.&lt;/p&gt;
&lt;p&gt;There are a couple tools that are quite similar to what I just built: There's one called Xacobeo, Eclipse has one built in, and even Firebug has a tool that does similar. Unfortunately though, these each operate on a different DOM interpretation than the one that lxml builds. &lt;/p&gt;
&lt;p&gt;So the problem I was running into was that while these tools helped, I consistently had the problem that when the HTML got nasty, they'd start falling over. &lt;/p&gt;
&lt;p&gt;No more! Today I built &lt;a href="https://bitbucket.org/mlissner/lxml-xpath-tester/"&gt;a quick Django app&lt;/a&gt; that can be run locally or on a server. It's quite simple. You input some HTML and an XPath expression, and it will tell you the matches for that expression. It has syntax highlighting, and a few other tricks up its sleeve, but it's pretty basic on the whole.&lt;/p&gt;
&lt;p&gt;I'd love to get any feedback I can about this. It's probably still got some bugs, but it's small enough that they should be quite easy to stamp out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I got in touch with the developer of Xacobeo. There's an --html flag that you can pass to it at startup, if that's your intention. If you use that, it indeed uses the same DOM parser that my tool does. Sigh. Affordances are important, especially in a GUI-based tool.&lt;/p&gt;</summary><category term="Python"></category><category term="lxml"></category><category term="juriscraper"></category><category term="courtlistener.com"></category></entry><entry><title>The Winning Font in Court Opinions</title><link href="http://michaeljaylissner.com/posts/2012/01/27/and-the-winning-font-in-court-documents-is/" rel="alternate"></link><updated>2012-01-27T22:15:58+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2012-01-27:posts/2012/01/27/and-the-winning-font-in-court-documents-is/</id><summary type="html">&lt;p&gt;At CourtListener, we're developing a new system to convert scanned court documents to text. As part of our development we've analyzed more than 1,000 court opinions to determine what fonts courts are using. &lt;/p&gt;
&lt;p&gt;Now that we have this information,our next step is to create training data for &lt;a href="http://code.google.com/p/tesseract-ocr/"&gt;our OCR system&lt;/a&gt; so that it specializes in these fonts, but for now we've attached a spreadsheet with our findings, and a script that can be used by others to extract font metadata from PDFs.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, the top font &amp;mdash; drumroll please &amp;mdash; is Times New Roman. &lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Font&lt;/td&gt;
        &lt;th&gt;Regular&lt;/td&gt;
        &lt;th&gt;Bold
        &lt;th&gt;Italic
        &lt;th&gt;Bold Italic
        &lt;th&gt;Total
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Times
        &lt;td&gt;1454
        &lt;td&gt;953
        &lt;td&gt;867
        &lt;td&gt;47
        &lt;td&gt;&lt;strong&gt;3321&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Courier
        &lt;td&gt;369
        &lt;td&gt;333
        &lt;td&gt;209
        &lt;td&gt;131
        &lt;td&gt;&lt;strong&gt;1042&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Arial
        &lt;td&gt;364
        &lt;td&gt;39
        &lt;td&gt;11
        &lt;td&gt;41
        &lt;td&gt;&lt;strong&gt;455&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Symbol
        &lt;td&gt;212
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;212&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Helvetica
        &lt;td&gt;24
        &lt;td&gt;161
        &lt;td&gt;2
        &lt;td&gt;2
        &lt;td&gt;&lt;strong&gt;189&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Century Schoolbook
        &lt;td&gt;58
        &lt;td&gt;54
        &lt;td&gt;52
        &lt;td&gt;9
        &lt;td&gt;&lt;strong&gt;173&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Garamond
        &lt;td&gt;44
        &lt;td&gt;42
        &lt;td&gt;41
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;127&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Palatino Linotype
        &lt;td&gt;36
        &lt;td&gt;24
        &lt;td&gt;24
        &lt;td&gt;1
        &lt;td&gt;&lt;strong&gt;85&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Old English
        &lt;td&gt;42
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;42&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Lincoln
        &lt;td&gt;27
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;27&lt;/strong&gt;
    &lt;/tr&gt;
&lt;/table&gt;</summary><category term="typography"></category><category term="tesseract"></category><category term="Python"></category><category term="ocr"></category><category term="font"></category><category term="courtlistener.com"></category></entry><entry><title>Using Pylint in Geany</title><link href="http://michaeljaylissner.com/posts/2010/08/11/using-pylint-in-geany/" rel="alternate"></link><updated>2010-08-11T12:07:23+02:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2010-08-11:posts/2010/08/11/using-pylint-in-geany/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.logilab.org/857"&gt;Pylint&lt;/a&gt; is a tool that tells you 
when your Python code is broken or when it has coding problems. As a newish 
Python coder, using it has taught me a lot about conventions, 
and has helped to make my code significantly cleaner. Enabling it in my IDE,
 &lt;a href="http://www.geany.org/"&gt;Geany&lt;/a&gt;, makes it so that using it is 
 just another part of my development workflow. &lt;/p&gt;
&lt;p&gt;Enabling Pylint in Geany is easy. Simply open Geany, and create a new build 
command that uses &lt;code&gt;pylint -r no "%f"&lt;/code&gt; as the command, and &lt;code&gt;(W|E|F):([0-9]+):
(.*)&lt;/code&gt; as the error regular expression. After you've done this, 
using this build command instead of saving your work will run Pylint on your
 current file, showing you warnings, errors and fatal errors in red.&lt;/p&gt;</summary><category term="Python"></category><category term="pylint"></category><category term="geany"></category></entry><entry><title>Using Revision Control on a Django Project Without Revealing Your Passwords</title><link href="http://michaeljaylissner.com/posts/2010/02/24/using-revision-control-on-a-django-project-without-revealing-your-passwords/" rel="alternate"></link><updated>2010-02-24T17:15:54+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2010-02-24:posts/2010/02/24/using-revision-control-on-a-django-project-without-revealing-your-passwords/</id><summary type="html">&lt;p&gt;Just a quick post today, since this took me way too long to figure out. If you have a django project that you want to share without sharing the private bits of settings.py, there is an easy way to do this. &lt;/p&gt;
&lt;p&gt;I tried for a while to to set up mercurial hooks that would strip out my passwords before each commit, and then place them back after each commit, thus avoiding uploading them publicly. This does not work however because all of the mercurial hooks happen after snapshots of the modified files have been made. So you can edit the files using a hook, but your edits will only go into effect upon the &lt;em&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/em&gt; check in. Clearly, this will not do.&lt;/p&gt;
&lt;p&gt;Another solution that I tried was the mercurial &lt;a href="http://mercurial.selenic.com/wiki/KeywordExtension" target="_blank"&gt;keyword extension&lt;/a&gt;. This could work, but ultimately it does not because you have to remember to run it before and after each commit &amp;mdash; something I know I'd forget sooner or later.&lt;/p&gt;
&lt;p&gt;The solution that &lt;em&gt;&lt;strong&gt;does&lt;/strong&gt;&lt;/em&gt; work is to split up your settings.py file into multiple pieces such that there is a private file and a public file. I followed the instructions &lt;a href="http://code.djangoproject.com/wiki/SplitSettings#UsingalistofconffilesTransifex" target="_blank"&gt;here&lt;/a&gt;, with the resulting code looking being checked in &lt;a href="http://bitbucket.org/mlissner/legal-current-awareness/src/fa5cc7fb9c0b/alert/settings.py" target="_blank"&gt;here&lt;/a&gt; and &lt;a href="http://bitbucket.org/mlissner/legal-current-awareness/src/fa5cc7fb9c0b/alert/settings/" target="_blank"&gt;here&lt;/a&gt;. There is also a file called "20-private.conf" which is not uploaded publicly, and which contains all the private bits of code that would normally be found in settings.py. Thus, all of my settings can be found my django, but I do not have to share my private ones.&lt;/p&gt;</summary><category term="settings.py"></category><category term="revision control"></category><category term="Python"></category><category term="mercurial"></category><category term="django"></category><category term="Final Project"></category></entry><entry><title>A Python Function to Verify Twitter Credentials</title><link href="http://michaeljaylissner.com/posts/2009/04/03/a-python-function-to-verify-twitter-credentials/" rel="alternate"></link><updated>2009-04-03T19:09:25+02:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2009-04-03:posts/2009/04/03/a-python-function-to-verify-twitter-credentials/</id><summary type="html">&lt;p&gt;Thought I'd post this for the future generations, since I had a hard time 
finding a template anywhere on the web when I needed one. It's nothing 
revolutionary, but a useful snippet nonetheless. This is for one of my 
projects this semester.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pycurl&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verifyTwitterCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Curl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://twitter.com/account/verify_credentials.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;USERPWD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;twitterfeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_CODE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;verified&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category><category term="programming"></category><category term="Twitter"></category><category term="pycurl"></category></entry><entry><title>Working with matplotlib and pycairo</title><link href="http://michaeljaylissner.com/posts/2009/01/19/working-with-matplotlib-and-pycairo/" rel="alternate"></link><updated>2009-01-19T16:25:32+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2009-01-19:posts/2009/01/19/working-with-matplotlib-and-pycairo/</id><summary type="html">&lt;p&gt;I spent a good part of my winter break working on learning &lt;a href="http://python.org" target="_blank"&gt;Python&lt;/a&gt; and using it for projects. One project was the &lt;a href="http://michaeljaylissner.com/blog/yelp-scraper" target="_blank"&gt;Yelp scraper&lt;/a&gt; that I posted about previously, and another was a report for my old work. &lt;/p&gt;
&lt;p&gt;The report is a statistical analysis of the development of about 2,000 children aged three and four. For those interested, I'll try to post it here once the final version is ready to go. In the past when making the report, I had been frustrated because there was no easy way to script the creation of the 30 or so charts that need to be made. Excel had been our data analysis tool, and as such, we were stuck with either using VBA to create charts, or to do it by hand. Since nobody knew VBA, we always just buckled down and did the work by hand.&lt;/p&gt;
&lt;p&gt;This time around, I discovered the &lt;a href="http://matplotlib.sourceforge.net/" target="_blank"&gt;matplotlib Python library&lt;/a&gt;, and used that to create the charts. It was an pretty rough experience all in all. While simple graphs can be created in about five lines of code, creating complicated ones took a good amount of work. For example, to change the tick markers on a graph requires that you create tick objects, and then manipulate them each individually in a for loop. Granted, I couldn't customize them at all in Excel, but figuring out that kind of change was a pain indeed. &lt;/p&gt;
&lt;p&gt;The report itself required about 1,000 lines of code, and each chart required about 100-200 lines. For custom charts, I didn't find the library that useful, however towards the end of the report there are 30 charts, all of which are identical, except for the data. For these charts, I was able to make a for loop that created them all in about 20 minutes, whereas previously these took me a few hours to make by hand. &lt;/p&gt;
&lt;p&gt;Another library I spent some time learning was the &lt;a href="http://www.cairographics.org/pycairo/" target="_blank"&gt;pycairo&lt;/a&gt; library, which allows pixel by pixel editing of pictures. I had planned to use it to do any editing to the charts that I was unable to accomplish with the matplotlib library, but in the end, it was unnecessary. I have another project coming up though that will use the pycairo library, so look for that soon.&lt;/p&gt;</summary><category term="Python"></category><category term="programming"></category><category term="matplotlib"></category><category term="pycairo"></category><category term="project"></category></entry><entry><title>Yelp Scraper to Get Business Info in a Geographic Area</title><link href="http://michaeljaylissner.com/posts/2008/12/21/yelp-scraper/" rel="alternate"></link><updated>2008-12-21T16:41:13+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2008-12-21:posts/2008/12/21/yelp-scraper/</id><summary type="html">&lt;p&gt;I spent the past couple days on one of my first Python projects - using the &lt;a href="http://www.yelp.com/developers" target="_blank"&gt;Yelp API&lt;/a&gt; to compile a list of restaurants in a defined geographic area.&lt;/p&gt;
&lt;p&gt;It's been a good project. Because of some limitations of the API, I had to do some interesting tricks to make it work. One problem with the API is that it only allows 20 hits per query, so if you want to do a big query, you have to divide it up into tiny queries that have fewer than 20 hits each. &lt;/p&gt;
&lt;p&gt;To accomplish that, if a query gets 20 hits within those two points, it will divide the longer dimension of the rectangle created by the points in half, and perform a query on each of those two new rectangles. For each of those, if there are 20 hits, it will again divide it in two and perform two new queries, and so forth until less than 20 hits are found for the rectangle. Once less than 20 hits are found, the data is entered into a database. Once all the points have been added to the database, a comma separated file is created, and the program ends. &lt;/p&gt;
&lt;p&gt;It was pretty incredible switching to Python for this project from my usual Java, and also using an official API for the first time. This project ended up being about 200 lines (half of which are comments). I can't imagine how long it would be with Java, since I used some rather powerful Python modules to accomplish this (namely, csv, urllib &amp;amp; json).&lt;/p&gt;
&lt;p&gt;If anybody is interested in seeing/using the code, let me know. It should be useful if you need a list of restaurants or other businesses in a certain area. Worthy causes only please!&lt;/p&gt;</summary><category term="Python"></category><category term="yelp"></category><category term="programming"></category><category term="scrape"></category></entry><entry><title>Dear God, This is a Terrible Interface</title><link href="http://michaeljaylissner.com/posts/2008/12/13/this-is-a-terrible-interface/" rel="alternate"></link><updated>2008-12-13T19:17:04+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2008-12-13:posts/2008/12/13/this-is-a-terrible-interface/</id><summary type="html">&lt;p&gt;The UI for a KDE Python IDE is about the worst I have ever seen:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://michaeljaylissner.com/files/images/clutter.preview.png"&gt;&lt;/p&gt;
&lt;p&gt;That's about 90 buttons.&lt;/p&gt;</summary><category term="UI"></category><category term="Python"></category><category term="Eric"></category></entry></feed>