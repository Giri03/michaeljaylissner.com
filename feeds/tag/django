<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Jay Lissner</title><link href="http://michaeljaylissner.com/" rel="alternate"></link><link href="http://michaeljaylissner.com/feeds/tag/django" rel="self"></link><id>http://michaeljaylissner.com/</id><updated>2011-12-02T09:37:39+01:00</updated><entry><title>Integrating Solr Search with Django at CourtListener</title><link href="http://michaeljaylissner.com/posts/2011/12/02/integrating-solr-search-with-django-at-courtlistener/" rel="alternate"></link><updated>2011-12-02T09:37:39+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2011-12-02:posts/2011/12/02/integrating-solr-search-with-django-at-courtlistener/</id><summary type="html">&lt;p&gt;Over the past few weeks, I&amp;#8217;ve been hard at work on the new version of &lt;a href="http://courtlistener.com"&gt;CourtListener&lt;/a&gt;. Unfortunately, progress has been slower than I&amp;#8217;d like due to the limitations of the Solr frameworks I&amp;#8217;ve been using. There are a number of competing frameworks available, each with its own strengths and&amp;nbsp;pitfalls.&lt;/p&gt;
&lt;p&gt;So far, I&amp;#8217;ve tried two of the popular ones, &lt;a href="http://haystacksearch.org/"&gt;Haystack&lt;/a&gt; and &lt;a href="http://opensource.timetric.com/sunburnt/index.html"&gt;Sunburnt&lt;/a&gt;. I&amp;#8217;m pretty impressed by both, but today&amp;#8217;s blog post is to outline the problems I&amp;#8217;m having with these frameworks so that others that are faced with choosing one might be better informed. The difference between these frameworks is vast. Haystack aims to solve all of your integration needs, while Sunburnt is a fairly lightweight wrapper around&amp;nbsp;Solr.&lt;/p&gt;
&lt;h3&gt;CourtListener&amp;#8217;s&amp;nbsp;needs&lt;/h3&gt;

&lt;p&gt;At CourtListener, we have some big goals for the new search version. At its core, it&amp;#8217;s essentially a search-powered site, so we have some big&amp;nbsp;needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.uxmatters.com/mt/archives/2009/09/best-practices-for-designing-faceted-search-filters.php"&gt;Parallel Faceted&amp;nbsp;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Highlighting&lt;/li&gt;
&lt;li&gt;Complex boolean searches supported by Solr&amp;#8217;s eDisMax&amp;nbsp;syntax&lt;/li&gt;
&lt;li&gt;Snippets below search results and in&amp;nbsp;emails&lt;/li&gt;
&lt;li&gt;Standard search stuff: field-level boosting, result and facet counts, field-level searching, result pagination, performance,&amp;nbsp;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;#8217;re currently using &lt;a href="http://sphinxsearch.com"&gt;Sphinx Search&lt;/a&gt; with &lt;a href="http://github.com/dcramer/django-sphinx"&gt;django-sphinx&lt;/a&gt;, which does a fine job, but it has some&amp;nbsp;problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django-sphinx hasn&amp;#8217;t been maintained in years, and requires&amp;nbsp;patching&lt;/li&gt;
&lt;li&gt;django-sphinx doesn&amp;#8217;t support&amp;nbsp;snippets&lt;/li&gt;
&lt;li&gt;Sphinx doesn&amp;#8217;t (yet) support real time indexing (though it&amp;#8217;s in beta, I&amp;nbsp;believe)&lt;/li&gt;
&lt;li&gt;Sphinx doesn&amp;#8217;t have the community and features that Solr&amp;nbsp;does&lt;/li&gt;
&lt;li&gt;Unfamiliar syntax for&amp;nbsp;users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general, these problems aren&amp;#8217;t too difficult, but in combination, they make for a poor user experience. The last point is a real deal breaker, since most users are accustomed to making queries like [ site:google.com ], which works for Solr and Google, but not for Sphinx. In Sphinx, your query is [ @site(google.com) ]. While we could do post processing of the user&amp;#8217;s query to convert it to Google/Solr-style syntax, it&amp;#8217;s unreliable and prone to failing in corner cases. Parsing queries is hard. More on this in a&amp;nbsp;moment. &lt;/p&gt;
&lt;h3&gt;Let&amp;#8217;s try&amp;nbsp;Haystack&lt;/h3&gt;

&lt;p&gt;In switching from Sphinx, I first tried Haystack as a solution, since it has excellent documentation and seems to be the most popular solution. I spent about two weeks learning about it and getting it in place, but ultimately, I gave up on it because I found that I was subclassing it everywhere. Haystack is a good solution, to be sure, but I found that I&amp;nbsp;was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subclassing the FacetView so it could support parallel facet&amp;nbsp;counts&lt;/li&gt;
&lt;li&gt;Subclassing the FacetForm for another feature I&amp;nbsp;needed&lt;/li&gt;
&lt;li&gt;Subclassing the Solr backend so it could support Solr&amp;#8217;s highlighting&amp;nbsp;syntax&lt;/li&gt;
&lt;li&gt;Further subclassing the Solr backend so it can support additional Solr parameters that aren&amp;#8217;t built&amp;nbsp;in&lt;/li&gt;
&lt;li&gt;&amp;#8230;etc&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I worked on that third point for the better part of a day before deciding that Haystack wasn&amp;#8217;t for me. Rather than spending my time working on the search needs of CourtListener, I was spending most of it hacking on Haystack, and trying to understand the way it fits together. It&amp;#8217;s not unreasonably complex, but there is a &lt;span class="caps"&gt;LOT&lt;/span&gt; of documentation, and a lot of complexity that I don&amp;#8217;t need (such as the ability to switch search backends). Instead of a big solution that allows me to subclass whatever I need (which is good), I needed a lighter-weight solution that was more nimble, and which allowed me to interact with Solr in a more direct&amp;nbsp;way.&lt;/p&gt;
&lt;h3&gt;Enter&amp;nbsp;Sunburnt&lt;/h3&gt;

&lt;p&gt;Sunburnt is a lightweight solution that is everything that Haystack isn&amp;#8217;t. From the moment it&amp;#8217;s installed, you can start making queries without configuring Django to use it, and without really knowing much else. Its documentation is a single page, which is actually a big relief after coming from Haystack. But Sunburnt has a major problem in its design: It doesn&amp;#8217;t support just sending queries to Solr. The expectation in Sunburnt is that each system using it does post-processing on the user&amp;#8217;s query, and then submits the query to Sunburnt in&amp;nbsp;stages. &lt;/p&gt;
&lt;p&gt;So, if a user searches for &amp;#8220;foo bar&amp;#8221;, rather than just passing that to Sunburnt, you have to split on the white space, then&amp;nbsp;pass: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first you think, &amp;#8220;&lt;span class="caps"&gt;OK&lt;/span&gt;, I can do that - just split on white space, no big deal.&amp;#8221; Then you start thinking about the &lt;a href="http://lucene.apache.org/java/3_4_0/queryparsersyntax.html#Escaping%20Special%20Characters"&gt;other syntax&lt;/a&gt; that Solr supports, and you realize that you have a real problem if you have to split up queries appropriately. Trust me when I say that you don&amp;#8217;t want to be thinking about how to send a query like this one to Sunburnt: [ foo bar &amp;#8220;jakarta apache&amp;#8221;~10&amp;nbsp;]. &lt;/p&gt;
&lt;p&gt;The author of Sunburnt will point out that there&amp;#8217;s a workaround for this problem. You can&amp;nbsp;use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;jakarta apache&amp;quot;~10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That works, to a point, but that syntax isn&amp;#8217;t supported on facets, so your facet counts won&amp;#8217;t have the same counts as your results. And so, Sunburnt, though powerful and lightweight,&amp;nbsp;fails.&lt;/p&gt;
&lt;h3&gt;What&amp;nbsp;now?&lt;/h3&gt;

&lt;p&gt;Good&amp;nbsp;question.&lt;/p&gt;</summary><category term="Sunburnt"></category><category term="Solr"></category><category term="Haystack"></category><category term="django"></category><category term="courtlistener.com"></category></entry><entry><title>Using Revision Control on a Django Project Without Revealing Your Passwords</title><link href="http://michaeljaylissner.com/posts/2010/02/24/using-revision-control-on-a-django-project-without-revealing-your-passwords/" rel="alternate"></link><updated>2010-02-24T17:15:54+01:00</updated><author><name>Michael Lissner</name></author><id>tag:michaeljaylissner.com,2010-02-24:posts/2010/02/24/using-revision-control-on-a-django-project-without-revealing-your-passwords/</id><summary type="html">&lt;p&gt;Just a quick post today, since this took me way too long to figure out. If you have a django project that you want to share without sharing the private bits of settings.py, there is an easy way to do&amp;nbsp;this. &lt;/p&gt;
&lt;p&gt;I tried for a while to to set up mercurial hooks that would strip out my passwords before each commit, and then place them back after each commit, thus avoiding uploading them publicly. This does not work however because all of the mercurial hooks happen after snapshots of the modified files have been made. So you can edit the files using a hook, but your edits will only go into effect upon the &lt;em&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/em&gt; check in. Clearly, this will not&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;Another solution that I tried was the mercurial &lt;a href="http://mercurial.selenic.com/wiki/KeywordExtension" target="_blank"&gt;keyword extension&lt;/a&gt;. This could work, but ultimately it does not because you have to remember to run it before and after each commit &amp;mdash; something I know I&amp;#8217;d forget sooner or&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;The solution that &lt;em&gt;&lt;strong&gt;does&lt;/strong&gt;&lt;/em&gt; work is to split up your settings.py file into multiple pieces such that there is a private file and a public file. I followed the instructions &lt;a href="http://code.djangoproject.com/wiki/SplitSettings#UsingalistofconffilesTransifex" target="_blank"&gt;here&lt;/a&gt;, with the resulting code looking being checked in &lt;a href="http://bitbucket.org/mlissner/legal-current-awareness/src/fa5cc7fb9c0b/alert/settings.py" target="_blank"&gt;here&lt;/a&gt; and &lt;a href="http://bitbucket.org/mlissner/legal-current-awareness/src/fa5cc7fb9c0b/alert/settings/" target="_blank"&gt;here&lt;/a&gt;. There is also a file called &amp;#8220;20-private.conf&amp;#8221; which is not uploaded publicly, and which contains all the private bits of code that would normally be found in settings.py. Thus, all of my settings can be found my django, but I do not have to share my private&amp;nbsp;ones.&lt;/p&gt;</summary><category term="settings.py"></category><category term="revision control"></category><category term="Python"></category><category term="mercurial"></category><category term="django"></category><category term="Final Project"></category></entry></feed>